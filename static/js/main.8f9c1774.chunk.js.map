{"version":3,"sources":["components/CartProvider.tsx","components/Nav.tsx","constants/index.ts","utils.ts","components/ProductListing.tsx","views/Products.tsx","views/Cart.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CartContext","React","createContext","displayName","initialItems","raw","localStorage","getItem","JSON","parse","loadFromStore","CartProvider","props","set","product","quantity","console","log","name","setCartState","items","state","item","find","i","index","findIndex","splice","push","setItem","stringify","get","cartState","useState","val","total","reduce","a","c","price","itemCount","add","remove","Provider","value","children","Nav","Consumer","className","style","padding","to","products","currency","num","Math","round","ProductListing","onClick","Products","map","key","Cart","length","type","onChange","e","target","marginRight","href","window","location","App","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f9c1774.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {Product} from '../constants';\n\nexport interface CartItem {\n  product: Product;\n  quantity: number;\n}\nexport interface CartContextValue {\n  items: CartItem[];\n  total: number;\n  itemCount: number;\n  add(product: Product, quantity: number): void;\n  set(product: Product, quantity: number): void;\n  get(product: Product): CartItem | null;\n  remove(product: Product): void;\n}\n\nexport const CartContext = React.createContext({});\nCartContext.displayName = 'CartContext';\n\ninterface Props extends React.PropsWithChildren<any> {}\n\nconst initialItems = loadFromStore();\n\nconst CartProvider = (props: Props) => {\n  function add(product: Product, quantity: number): void {\n    const item = get(product);\n    set(product, item ? (item.quantity + quantity) : quantity); // Either add to existing quantity, or set to the quantity\n  }\n  function set(product: Product, quantity: number): void {\n    console.log(`Setting ${product.name} to ${quantity}`);\n    setCartState((items) => {\n      const item = items.find(i => i.product.name === product.name); // Use items instead of cartState so atomic ops perform right\n      if (item) {\n\n        // Remove condition\n        if (quantity === 0) {\n          const index = items.findIndex(i => i === item);\n          items.splice(index, 1);\n\n        // Update condition\n        } else {\n          item.quantity = quantity;\n        }\n      } else {\n\n        // Create condition\n        items.push({\n          product,\n          quantity: quantity\n        });\n      }\n\n      saveStore(items);\n      return [...items]; // We need to create a new array object so react knows to update\n    });\n  }\n  function get(product: Product): CartItem | null {\n    return cartState.find(item => item.product.name === product.name) || null;\n  }\n  function remove(product: Product): void {\n    set(product, 0);\n  }\n  const [cartState, setCartState] = useState<CartItem[]>(initialItems);\n\n  // Wow I hope this works...\n  console.log('Render!'); // Easy check if we render too often\n  const val: CartContextValue = {\n    items: cartState,\n    total: cartState.reduce((a, c) => a + (c.product.price * c.quantity), 0),\n    itemCount: cartState.reduce((a, c) => a + c.quantity, 0),\n    add, set, get, remove\n  };\n\n  return (<CartContext.Provider value={val}>\n    {props.children}\n  </CartContext.Provider>);\n};\n\nfunction saveStore(state: CartItem[]): void {\n  localStorage.setItem('cartItems', JSON.stringify(state))\n}\n\nfunction loadFromStore(): CartItem[] {\n  const raw = localStorage.getItem('cartItems');\n  if (raw) return JSON.parse(raw);\n  else return [];\n}\n\nexport default CartProvider;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport {CartContext} from './CartProvider';\n\nconst Nav = () => {\n  return (<CartContext.Consumer>\n    {({itemCount}: any) => (<nav className=\"flexWrap\" style={{padding: '1em 0'}}>\n      <Link to=\"/\">Home</Link>\n      <span className=\"flex\" />\n      <Link to=\"/cart\">Cart{itemCount ? ` (${itemCount})` : ''}</Link>\n    </nav>)}\n  </CartContext.Consumer>);\n};\n\nexport default Nav;\n","export interface Product {\n  name: string;\n  price: number;\n}\n\nexport const products: Product[] = [\n  {\n    name: \"Plumpy Nut\",\n    price: 25.76\n  },\n  {\n    name: \"Measles Vaccine\",\n    price: 90.51\n  },\n  {\n    name: \"Therapeutic Milk\",\n    price: 56.14\n  },\n  {\n    name: \"Pencils\",\n    price: 13.9\n  },\n  {\n    name: \"School Bags\",\n    price: 19.45\n  }\n];\n","export function currency(num: number): string {\n  return '$' + (Math.round(num * 100)) / 100;\n}\n","import React from 'react';\nimport {Product} from '../constants';\nimport {CartContext} from './CartProvider';\nimport {currency} from '../utils';\n\ninterface Props {\n  product: Product;\n}\n\nconst ProductListing = (props: Props) => {\n  return (<CartContext.Consumer>\n    {({add}: any) => (<div className=\"flexWrap alignCenter\"> {/* We don't seem to be able to type it without TypeScript complaining :( */}\n      <div>\n        <p>{props.product.name}</p>\n        <i>{currency(props.product.price)}</i>\n      </div>\n      <span className=\"flex\" />\n      <button onClick={() => add(props.product, 1)}>Add to cart</button>\n    </div>)}\n  </CartContext.Consumer>);\n};\n\nexport default ProductListing;\n","import React from 'react';\nimport {products} from '../constants';\nimport ProductListing from '../components/ProductListing';\nimport './Products.css';\n\nconst Products = () => {\n  return (<div className=\"productsPage\">\n    <h2>Welcome to Acme Inc.</h2>\n    <i>\"We'll take your money, at a discount!\"</i>\n    <ul className=\"productList\">\n      {products.map(product => {\n        return (<li key={product.name}><ProductListing product={product} /></li>)\n      })}\n    </ul>\n  </div>);\n};\n\nexport default Products;\n","import React from 'react';\nimport {CartContext, CartItem} from '../components/CartProvider';\nimport {currency} from '../utils';\nimport './Cart.css';\n\nconst Cart = () => {\n  return (<CartContext.Consumer>\n    {({items, total, set, remove}: any) => (<div className=\"cart\">\n      <h2>You have {items.length} items in your cart</h2>\n      <ul className=\"cartItems\">\n        {items.map((item: CartItem) => (<li key={item.product.name} className=\"flexWrap\">\n          <button onClick={() => remove(item.product)}>Remove</button>\n          <p>{item.product.name}</p>\n          <span className=\"flex\" />\n          <input type=\"number\" value={item.quantity} onChange={(e) => set(item.product, +e.target.value)}/>\n          <i className=\"cartItemTotal\">{currency(item.quantity * item.product.price)}</i>\n        </li>))}\n      </ul>\n\n      <div className=\"flexWrap\">\n        <span className=\"flex\" />\n        <p style={{marginRight: '1em'}}>Cart total: {currency(total)}</p>\n        {/* Don't question this line. */}\n        {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n        <a className=\"button\" href=\"#\" onClick={() => window.location.href = \"https://youtu.be/dQw4w9WgXcQ\"}>Checkout</a>\n      </div>\n    </div>)}\n  </CartContext.Consumer>)\n};\n\nexport default Cart;\n","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport CartProvider from './components/CartProvider';\nimport Nav from './components/Nav';\nimport './App.css';\nimport Products from './views/Products';\nimport Cart from './views/Cart';\n\nconst App = () => {\n  return (\n    <CartProvider>\n      <Router>\n        <div className=\"app\">\n          <Nav />\n          <Switch>\n            <Route path=\"/cart\" component={Cart} />\n            <Route path=\"/\" component={Products} />\n          </Switch>\n        </div>\n      </Router>\n    </CartProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}